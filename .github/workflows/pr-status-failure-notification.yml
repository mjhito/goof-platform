name: Notify PR Author on Check Failure

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  check-status:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code (optional depending on use case)
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Fetch the check runs for the PR
      - name: Fetch PR check runs
        id: fetch-checks
        run: |
          echo "Fetching check runs for PR #${{ github.event.pull_request.number }}"

          PR_CHECKS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/check-runs")

          # Debugging: Print the raw API response
          echo "PR_CHECKS: $PR_CHECKS"

          # Check if the response is null or contains no check runs
          if [[ "$PR_CHECKS" == "null" || "$PR_CHECKS" == "[]" ]]; then
            echo "No check runs found for this PR."
            echo "FAILURE_FOUND=0" >> $GITHUB_ENV
            exit 0
          fi

          # Safely extract the conclusion of each check run if $PR_CHECKS is not null
          CONCLUSIONS=$(echo "$PR_CHECKS" | jq -r '.check_runs[].conclusion' 2>/dev/null)

          # Check if jq failed (e.g., no check runs found)
          if [[ $? -ne 0 || -z "$CONCLUSIONS" ]]; then
            echo "No check runs or conclusions found."
            echo "FAILURE_FOUND=0" >> $GITHUB_ENV
            exit 0
          fi

          # Check if any status check is a failure
          FAILURE_FOUND=$(echo "$CONCLUSIONS" | grep -c "failure")
          echo "Failures found: $FAILURE_FOUND"
          echo "FAILURE_FOUND=$FAILURE_FOUND" >> $GITHUB_ENV

      # Step 3: Notify PR author if failure found
      - name: Notify PR author if failure is found
        if: env.FAILURE_FOUND != '0'
        run: |
          PR_AUTHOR=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}" | jq -r '.user.login')

          echo "Notifying PR author: $PR_AUTHOR"
          
          # Send a notification to Slack (example, can be customized)
          curl -X POST -H 'Content-type: application/json' --data \
            '{"text": "Hi @'"$PR_AUTHOR"', your PR #'"${{ github.event.pull_request.number }}"' has a failing status check."}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

          # You can also send an email or other types of notification if desired.
